// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Modelos para la aplicación ALY Gestion

// Usuario para autenticación
model Usuario {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  nombre    String
  rol       String   @default("usuario") // admin, usuario
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Cliente
model Cliente {
  id              String           @id @default(uuid())
  razonSocial     String
  direccion       String
  numeroTVA       String?
  telefono        String?
  email           String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  facturas        Factura[]
  prefacturas     Prefactura[]
  bonsLivraison   BonLivraison[]
}

// Proveedor
model Proveedor {
  id                  String                @id @default(uuid())
  razonSocial         String
  direccion           String
  numeroTVA           String?
  telefono            String?
  email               String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  facturasCompra      FacturaCompra[]
  prefacturasCompra   PrefacturaCompra[]
  bonsRecepcion       BonRecepcion[]
  locationMateriel    LocationMateriel[]
}

// Factura de venta
model Factura {
  id              String           @id @default(uuid())
  numero          String           @unique
  fecha           DateTime
  referenciaProyecto String?
  clienteId       String
  cliente         Cliente          @relation(fields: [clienteId], references: [id])
  lineasDetalle   LineaDetalle[]
  montoHT         Float
  montTVA         Float
  montoTTC        Float
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

// Prefactura
model Prefactura {
  id              String           @id @default(uuid())
  numero          String           @unique
  fecha           DateTime
  referenciaProyecto String?
  clienteId       String
  cliente         Cliente          @relation(fields: [clienteId], references: [id])
  lineasDetalle   LineaDetalle[]
  montoHT         Float
  montTVA         Float
  montoTTC        Float
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

// Bon de Livraison
model BonLivraison {
  id              String           @id @default(uuid())
  numero          String           @unique
  fecha           DateTime
  referenciaProyecto String?
  clienteId       String
  cliente         Cliente          @relation(fields: [clienteId], references: [id])
  lineasMaterial  LineaMaterial[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

// Línea de detalle para facturas y prefacturas
model LineaDetalle {
  id                  String              @id @default(uuid())
  numeroPrix          String
  designacion         String
  unidad              String
  cantidad            Float
  precioUnitario      Float
  montoHT             Float
  facturaId           String?
  factura             Factura?            @relation(fields: [facturaId], references: [id])
  prefacturaId        String?
  prefactura          Prefactura?         @relation(fields: [prefacturaId], references: [id])
  facturaCompraId     String?
  facturaCompra       FacturaCompra?      @relation(fields: [facturaCompraId], references: [id])
  prefacturaCompraId  String?
  prefacturaCompra    PrefacturaCompra?   @relation(fields: [prefacturaCompraId], references: [id])
}

// Línea de material para bons de livraison
model LineaMaterial {
  id              String           @id @default(uuid())
  numeroPrix      String
  designacion     String
  unidad          String
  cantidad        Float
  bonLivraisonId  String
  bonLivraison    BonLivraison     @relation(fields: [bonLivraisonId], references: [id])
  bonRecepcionId  String?
  bonRecepcion    BonRecepcion?    @relation(fields: [bonRecepcionId], references: [id])
}

// Prefactura de compra
model PrefacturaCompra {
  id              String           @id @default(uuid())
  numero          String           @unique
  fecha           DateTime
  referenciaProyecto String?
  proveedorId     String
  proveedor       Proveedor        @relation(fields: [proveedorId], references: [id])
  lineasDetalle   LineaDetalle[]
  montoHT         Float
  montTVA         Float
  montoTTC        Float
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

// Factura de compra
model FacturaCompra {
  id              String           @id @default(uuid())
  numero          String           @unique
  fecha           DateTime
  referenciaProyecto String?
  proveedorId     String
  proveedor       Proveedor        @relation(fields: [proveedorId], references: [id])
  lineasDetalle   LineaDetalle[]
  montoHT         Float
  montTVA         Float
  montoTTC        Float
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

// Bon de Recepción
model BonRecepcion {
  id              String           @id @default(uuid())
  numero          String           @unique
  fecha           DateTime
  referenciaProyecto String?
  proveedorId     String
  proveedor       Proveedor        @relation(fields: [proveedorId], references: [id])
  lineasMaterial  LineaMaterial[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

// Gastos de Carburante
model FraisEssence {
  id              String           @id @default(uuid())
  fecha           DateTime
  numeroBL        String
  designacionServicio String
  monto           Float
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

// Hoja de Location Matériel
model LocationMateriel {
  id              String           @id @default(uuid())
  titulo          String
  periodo         String
  proveedorId     String?
  proveedor       Proveedor?       @relation(fields: [proveedorId], references: [id])
  registros       RegistroLocation[]
  totalGeneral    Float
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

// Registro de Location Matériel
model RegistroLocation {
  id                String           @id @default(uuid())
  fecha             DateTime
  numeroBL          String
  tipoMaterial      String
  unidad            String // Jours, Voyages, etc.
  cantidad          Float
  precioUnitario    Float
  precioTotal       Float
  locationMaterielId String
  locationMateriel  LocationMateriel @relation(fields: [locationMaterielId], references: [id])
}